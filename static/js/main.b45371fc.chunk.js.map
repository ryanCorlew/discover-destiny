{"version":3,"sources":["components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","marginRight","marginBottom","Form","inputChange","print","classes","onSubmit","e","TextField","className","placeholder","onChange","type","Button","variant","onClick","width","maxWidth","padding","margin","Result","searchResult","searched","name","description","src","icon","alt","Card","API_KEY","App","state","userInput","searchQuery","target","value","setState","preventDefault","fetch","headers","mode","cache","method","then","response","json","data","Response","results","length","res","displayProperties","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wTAKMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,YAAa,OACbC,aAAc,UAqBHC,EAjBF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACrBC,EAAUR,IAChB,OACE,0BAAMS,SAAU,SAACC,GAAD,OAAOH,EAAMG,KAC3B,kBAACC,EAAA,EAAD,CACEC,UAAWJ,EAAQN,KACnBW,YAAY,kBACZC,SAAU,SAACJ,GAAD,OAAOJ,EAAYI,IAC7BK,KAAK,SAEP,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAAS,kBAAMX,MAA1C,Y,QClBAP,EAAYC,YAAW,CAC3BC,KAAM,CACJiB,MAAO,cACPC,SAAU,MACVC,QAAS,MACTC,OAAQ,UAqBGC,EAjBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACVhB,EAAUR,IACVyB,EAAWD,EACf,6BACE,4BAAKA,EAAaE,MAClB,2BAAIF,EAAaG,aACjB,yBACEC,IAAG,gCAA2BJ,EAAaK,MAC3CC,IAAKN,EAAaE,QAItB,gDAEF,OAAO,kBAACK,EAAA,EAAD,CAAMnB,UAAWJ,EAAQN,MAAOuB,ICrBnCO,EAAU,mCAqDDC,E,4MAlDbC,MAAQ,CACNC,UAAW,GACXX,aAAc,I,EAGhBlB,YAAc,SAACI,GACb,IAAM0B,EAAc1B,EAAE2B,OAAOC,MAC7B,EAAKC,SAAS,CAAEJ,UAAWC,K,EAG7B7B,MAAQ,SAACG,GACHA,GAAGA,EAAE8B,iBACTC,MAAM,yFAAD,OACsF,EAAKP,MAAMC,UADjG,KAEH,CACEO,QAAS,CAAE,YAAaV,EAAS,eAAgB,oBACjDW,KAAM,OACNC,MAAO,UACPC,OAAQ,QAGTC,MAAK,SAACC,GAGL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GAIL,GAAIA,EAAKC,SAASC,QAAQA,QAAQC,OAAS,EAAG,CAC5C,IAAMC,EAAMJ,EAAKC,SAASC,QAAQA,QAAQ,GAAGG,kBAC7C,EAAKf,SAAS,CAAEf,aAAc6B,SACzB,EAAKd,SAAS,CAAEf,aAAc,S,uDAKzC,OACE,yBAAKZ,UAAU,OACb,gDACA,kBAAC,EAAD,CAAMN,YAAaiD,KAAKjD,YAAaC,MAAOgD,KAAKhD,QAChDgD,KAAKrB,MAAMV,aACV,kBAAC,EAAD,CAAQA,aAAc+B,KAAKrB,MAAMV,eAC/B,U,GA7CMgC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b45371fc.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginRight: \"15px\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst Form = ({ inputChange, print }) => {\n  const classes = useStyles();\n  return (\n    <form onSubmit={(e) => print(e)}>\n      <TextField\n        className={classes.root}\n        placeholder=\"enter item name\"\n        onChange={(e) => inputChange(e)}\n        type=\"text\"\n      />\n      <Button variant=\"outlined\" onClick={() => print()}>\n        Search\n      </Button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"fit-content\",\n    maxWidth: \"60%\",\n    padding: \"8px\",\n    margin: \"auto\",\n  },\n});\n\nconst Result = ({ searchResult }) => {\n  const classes = useStyles();\n  const searched = searchResult ? (\n    <div>\n      <h2>{searchResult.name}</h2>\n      <p>{searchResult.description}</p>\n      <img\n        src={`https://www.bungie.net${searchResult.icon}`}\n        alt={searchResult.name}\n      />\n    </div>\n  ) : (\n    <h2>Result Not Found</h2>\n  );\n  return <Card className={classes.root}>{searched}</Card>;\n};\n\nexport default Result;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nimport Result from \"./components/Result\";\n\nconst API_KEY = \"d412c8322a5249f1849e04b9aa63ded9\";\n\nclass App extends React.Component {\n  state = {\n    userInput: \"\",\n    searchResult: \"\",\n  };\n\n  inputChange = (e) => {\n    const searchQuery = e.target.value;\n    this.setState({ userInput: searchQuery });\n  };\n\n  print = (e) => {\n    if (e) e.preventDefault();\n    fetch(\n      `https://www.bungie.net/platform/Destiny2/Armory/Search/DestinyInventoryItemDefinition/${this.state.userInput}/`,\n      {\n        headers: { \"X-API-Key\": API_KEY, \"Content-Type\": \"application/json\" },\n        mode: \"cors\",\n        cache: \"default\",\n        method: \"GET\",\n      }\n    )\n      .then((response) => {\n        // The response is a Response instance.\n        // You parse the data into a useable format using `.json()`\n        return response.json();\n      })\n      .then((data) => {\n        // `data` is the parsed version of the JSON returned from the above endpoint.\n        // const res = data.Response;\n        // this.setState({ gHorn: res.data.inventoryItem.itemName });\n        if (data.Response.results.results.length > 0) {\n          const res = data.Response.results.results[0].displayProperties;\n          this.setState({ searchResult: res });\n        } else this.setState({ searchResult: \"\" });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Discover Destiny</h1>\n        <Form inputChange={this.inputChange} print={this.print} />\n        {this.state.searchResult ? (\n          <Result searchResult={this.state.searchResult} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}